// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview Provides AI-powered rebalancing suggestions for a portfolio.
 *
 * - `getRebalancingSuggestions` - A function that generates rebalancing suggestions for a portfolio.
 * - `PortfolioRebalancingInput` - The input type for the `getRebalancingSuggestions` function.
 * - `PortfolioRebalancingOutput` - The return type for the `getRebalancingSuggestions` function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const PortfolioHoldingSchema = z.object({
  name: z.string().describe('Name of the asset.'),
  quantity: z.number().describe('Number of shares/units held.'),
  currentPrice: z.number().describe('Current market price of the asset.'),
  currentAmount: z.number().describe('Current total value of the holding (quantity * currentPrice).'),
  objective: z.string().describe('Investment objective for this holding (e.g., growth, dividends, capital preservation).'),
  type: z.string().describe('Asset type (e.g., stock, ETF, bond).'),
  potentialIncome: z.string().describe('Potential income generated by this holding (e.g., dividends, interest).'),
  allocationPercentage: z.number().describe('Current allocation percentage of the holding in the portfolio.'),
  targetBuyAmount: z.number().describe('The targeted amount to buy.'),
  buyPrice: z.number().describe('The buy price of the asset.'),
  qtyToBuy: z.number().describe('The quantity to buy.'),
  actualGrosAmount: z.number().describe('The actual gross amount.'),
  isin: z.string().describe('The ISIN code of the asset.'),
});

const PortfolioRebalancingInputSchema = z.object({
  holdings: z.array(PortfolioHoldingSchema).describe('An array of portfolio holdings with their details.'),
  newInvestmentAmount: z.number().optional().describe('The new investment amount.'),
});

export type PortfolioRebalancingInput = z.infer<typeof PortfolioRebalancingInputSchema>;

const PortfolioRebalancingOutputSchema = z.object({
  suggestions: z.string().describe('AI-powered rebalancing suggestions based on portfolio data.'),
});

export type PortfolioRebalancingOutput = z.infer<typeof PortfolioRebalancingOutputSchema>;

export async function getRebalancingSuggestions(input: PortfolioRebalancingInput): Promise<PortfolioRebalancingOutput> {
  return portfolioRebalancingFlow(input);
}

const portfolioRebalancingPrompt = ai.definePrompt({
  name: 'portfolioRebalancingPrompt',
  input: {schema: PortfolioRebalancingInputSchema},
  output: {schema: PortfolioRebalancingOutputSchema},
  prompt: `You are a portfolio rebalancing expert. Analyze the given portfolio holdings and provide clear, actionable rebalancing suggestions, taking into account the objectives of each holding, current vs. target quantities, and potential income. Consider the user's existing holdings and make your suggestions based on them.

Here are the portfolio holdings:

{{#each holdings}}
  - Name: {{name}}
    - Quantity: {{quantity}}
    - Current Price: {{currentPrice}}
    - Current Amount: {{currentAmount}}
    - Objective: {{objective}}
    - Type: {{type}}
    - Potential Income: {{potentialIncome}}
    - Allocation Percentage: {{allocationPercentage}}
    - Target Buy Amount: {{targetBuyAmount}}
    - Buy Price: {{buyPrice}}
    - Quantity to Buy: {{qtyToBuy}}
    - Actual Gros Amount: {{actualGrosAmount}}
    - ISIN: {{isin}}
{{/each}}

{{#if newInvestmentAmount}}
The user wants to make a new investment of amount {{newInvestmentAmount}}. Adapt your strategy to suggest rebalancing together with new investments.
{{/if}}

Provide specific recommendations on which holdings to increase, decrease, or sell, and suggest alternative investments if necessary. Explain the reasoning behind each suggestion.
`,
});

const portfolioRebalancingFlow = ai.defineFlow(
  {
    name: 'portfolioRebalancingFlow',
    inputSchema: PortfolioRebalancingInputSchema,
    outputSchema: PortfolioRebalancingOutputSchema,
  },
  async input => {
    const {output} = await portfolioRebalancingPrompt(input);
    return output!;
  }
);
